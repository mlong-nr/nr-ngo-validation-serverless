name: Deploy On Workflow

on:
  workflow_dispatch:
    inputs:
      deploy_to_env:
        description: "STAGING | PROD"
        type: choice
        required: true
        default: "STAGING"
        options:
         - STAGING
         - PROD

jobs:
  serverless-deploy:
    name: Deploy lambda
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Is Staging
        id: isStaging
        if: contains(${{ github.event.inputs.deploy_to_env }}, 'STAGING')
        run: echo "::set-output name=staging::true"

      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: 16.x

      - name: Cache node_modules
        id: cache-node-modules
        uses: actions/cache@v1
        env:
          cache-name: node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.cache-name }}-

      - name: Install dependencies
        run: npm ci

      - name: Install Serverless Framework
        run: npm install -g serverless

      - name: Serverless Framework AWS authentication
        run: sls config credentials --provider aws --key ${{ secrets.AWS_KEY }} --secret ${{ secrets.AWS_SECRET }}

      - name: Create staging env file
        if: steps.isStaging.output.staging == true
        run: |
          cat > .env << EOF
          ${{ secrets.STAGING_ENV }}
          EOF

      - name: Create prod env file
        if: steps.isStaging.output.staging != true
        run: |
          cat > .env << EOF
          ${{ secrets.PROD_ENV }}
          EOF

      - name: Install NPM Dependencies
        run: npm install

      - name: Set stage for prod
        if: steps.isStaging.output.staging != true
        run: |
          sed -i "s/stage: staging\":.*/stage\": \"prod\",/g" serverless.yml

      - name: Deploy Lambda Functions
        run: sls deploy -s ${{ github.event.inputs.deploy_to_env }}

      - name: Sync terraform state with s3 bucket staging
        if: steps.isStaging.output.staging == true
        run: aws s3 sync .serverless s3://${{ secrets.STAGING_BUCKET }} --exclude "*" --include "validation-service.zip" --region us-east-2

      - name: Sync terraform state with s3 bucket prod
        if: steps.isStaging.output.staging != true
        run: aws s3 sync .serverless s3://${{ secrets.PROD_BUCKET }} --exclude "*" --include "validation-service.zip" --region us-east-2
