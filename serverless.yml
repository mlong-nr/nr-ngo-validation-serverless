service: validation-service

frameworkVersion: "3"

plugins:
  - serverless-offline
  - serverless-plugin-typescript
  - serverless-dotenv-plugin
  - serverless-iam-roles-per-function
  - serverless-newrelic-lambda-layers

useDotenv: true

custom:
  newRelic:
    accountId: ${env:NR_ACCOUNT_ID}
    apiKey: ${env:NR_API_KEY}
    enableExtension: true
    enableIntegration: true
    enableDistributedTracing: true
    logEnabled: true
    logLevel: trace
    cloudWatchFilter: "*"
    debug: true
    linkedAccount: 587989906310

  defaultStage: dev
  defaultRegion: eu-central-1
  environment: ${file(.env)}

provider:
  name: aws
  runtime: nodejs16.x
  lambdaHashingVersion: 20201221
  stage: staging
  region: ${env:REGION, self:custom.defaultRegion}
  environment:
    TEST: ${env:TEST, 'default_value'}

functions:
  validate:
    handler: src/functions/validator.validate
    description: Validates organization with Tech Soup API
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - rds-data:*
        Resource: "arn:aws:rds:*:*:cluster:${env:DATABASE_CLUSTER_NAME}"
      - Effect: "Allow"
        Action:
          - secretsmanager:*
        Resource: "arn:aws:secretsmanager:*:*:*"
    events:
      - http:
          path: /validate
          method: get
          cors: true
          authorizer:
            name: authorizer
            type: token
            resultTtlInSeconds: 0
    memorySize: 512
    tags:
      use_aurora: 'true'

  validate-token:
    handler: src/functions/validate-token.validateToken
    description: Validates token - checks if token was already used (checks the database)
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - rds-data:*
        Resource: "arn:aws:rds:*:*:cluster:${env:DATABASE_CLUSTER_NAME}"
      - Effect: "Allow"
        Action:
          - secretsmanager:*
        Resource: "arn:aws:secretsmanager:*:*:*"
    events:
      - http:
          path: /validate-token
          method: get
          cors: true
          authorizer:
            name: authorizer
            type: token
            resultTtlInSeconds: 0
    memorySize: 512
    tags:
      use_aurora: 'true'

  validate-account:
    handler: src/functions/validate-account.validateAccount
    description: Validates account - checks what is the status of provided account (checks the database)
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - rds-data:*
        Resource: "arn:aws:rds:*:*:cluster:${env:DATABASE_CLUSTER_NAME}"
      - Effect: "Allow"
        Action:
          - secretsmanager:*
        Resource: "arn:aws:secretsmanager:*:*:*"
    events:
      - http:
          path: /validate-account
          method: get
          cors: true
          authorizer:
            name: authorizer
            type: token
            resultTtlInSeconds: 0
    memorySize: 512
    tags:
      use_aurora: 'true'

  save-attempt:
    handler: src/functions/save-attempt.saveAttempt
    description: Saves validation attempt to database
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - rds-data:*
        Resource: "arn:aws:rds:*:*:cluster:${env:DATABASE_CLUSTER_NAME}"
      - Effect: "Allow"
        Action:
          - secretsmanager:*
        Resource: "arn:aws:secretsmanager:*:*:*"
    events:
      - http:
          path: /attempts
          method: post
          cors: true
          authorizer:
            name: authorizer
            type: token
            resultTtlInSeconds: 0
    memorySize: 512
    tags:
      use_aurora: 'true'

  get-validation-history:
    handler: src/functions/get-validation-history.getValidationHistory
    description: Returns the validation history from the database for selected account
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - rds-data:*
        Resource: "arn:aws:rds:*:*:cluster:${env:DATABASE_CLUSTER_NAME}"
      - Effect: "Allow"
        Action:
          - secretsmanager:*
        Resource: "arn:aws:secretsmanager:*:*:*"
    events:
      - http:
          path: /attempts
          method: get
          cors: true
          authorizer:
            name: authorizer
            type: token
            resultTtlInSeconds: 0
    memorySize: 512
    tags:
      use_aurora: 'true'

  get-history-adm:
    handler: src/functions/get-validation-history-adm.getValidationHistoryAdm
    description: Gets validation history - admin version
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - rds-data:*
        Resource: "arn:aws:rds:*:*:cluster:${env:DATABASE_CLUSTER_NAME}"
      - Effect: "Allow"
        Action:
          - secretsmanager:*
        Resource: "arn:aws:secretsmanager:*:*:*"
    events:
      - http:
          path: /attempts-adm
          method: get
          cors: true
          authorizer:
            name: authorizer
            type: token
            resultTtlInSeconds: 0
    memorySize: 512
    tags:
      use_aurora: 'true'

  manual-approval:
    handler: src/functions/manual-approval.manualApprove
    description: Saves information about account which should be validate mannually
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - rds-data:*
        Resource: "arn:aws:rds:*:*:cluster:${env:DATABASE_CLUSTER_NAME}"
      - Effect: "Allow"
        Action:
          - secretsmanager:*
        Resource: "arn:aws:secretsmanager:*:*:*"
    events:
      - http:
          path: /manual-approve
          method: post
          cors: true
          authorizer:
            name: authorizer
            type: token
            resultTtlInSeconds: 0
    memorySize: 512
    tags:
      use_aurora: 'true'

  get-llr:
    handler: src/functions/get-lookup-response.getLookupResponse
    description: Returns the lookup large response data for given org id
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - rds-data:*
        Resource: "arn:aws:rds:*:*:cluster:${env:DATABASE_CLUSTER_NAME}"
      - Effect: "Allow"
        Action:
          - secretsmanager:*
        Resource: "arn:aws:secretsmanager:*:*:*"
    events:
      - http:
          path: /large-response
          method: get
          cors: true
          authorizer:
            name: authorizer
            type: token
            resultTtlInSeconds: 0
    memorySize: 512
    tags:
      use_aurora: 'true'

  update-llr:
    handler: src/functions/update-llr.updateLookupLargeResponse
    description: Updates client data with LLR of existing clients
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - rds-data:*
        Resource: "arn:aws:rds:*:*:cluster:${env:DATABASE_CLUSTER_NAME}"
      - Effect: "Allow"
        Action:
          - secretsmanager:*
        Resource: "arn:aws:secretsmanager:*:*:*"
    events:
      - http:
          path: /update
          method: get
          cors: true
    memorySize: 512
    tags:
      use_aurora: 'true'

  authorizer:
    handler: src/functions/authorizer.authorize
    description: Authorizer for API gateway
    memorySize: 512
    environment:
      API_KEY: ${env:API_KEY, 'default_value'}
    tags:
      use_aurora: 'false'
